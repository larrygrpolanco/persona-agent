# Breakdown: persona.py (Agent Orchestrator)

## Purpose
This file defines the `Persona` class, which acts as the high-level orchestrator for the agent. It wires together all cognitive and memory modules, manages the agent's state, and provides the main interface for agent behavior.

## Key Structure & Methods & Relevance for TTRPG Pawn Agent

### 1. Initialization
- Instantiates the agent's memory modules:
  - **Spatial Memory** (`MemoryTree`): Used for physical world knowledge (mostly unnecessary for TTRPG, but could be adapted for narrative locations).
  - **Associative Memory** (`AssociativeMemory`): Core long-term memory for events, thoughts, and chats (essential for TTRPG).
  - **Scratch**: Short-term/working memory for current state, action, and conversation (essential for TTRPG).

### 2. save
- Saves the current state of all memory modules to disk.
  - *TTRPG Use*: Useful for persisting agent state between sessions.

### 3. Cognitive Methods
- **perceive**: Calls the perception module to process the environment and return perceived events.
  - *TTRPG Use*: Should be adapted to process narrative input (scene description, dialogue, etc.) instead of physical simulation.
- **retrieve**: Calls the retrieval module to surface relevant memories based on perception.
  - *TTRPG Use*: Essential for context-aware responses and planning.
- **plan**: Calls the planning module to generate the agent's next action or intention.
  - *TTRPG Use*: Should be refactored to focus on narrative-driven planning, not daily schedules or spatial actions.
- **execute**: Calls the execution module to carry out the planned action.
  - *TTRPG Use*: Should be adapted for narrative actions, not physical movement.
- **reflect**: Calls the reflection module to synthesize new thoughts and update memory.
  - *TTRPG Use*: Essential for character development and narrative continuity.
- **move**: Orchestrates the full cognitive cycle: perception → retrieval → planning → reflection → execution.
  - *TTRPG Use*: The structure is useful, but should be decoupled from simulation time, tiles, and physical movement.
- **open_convo_session**: Starts an interactive conversation session.
  - *TTRPG Use*: Useful for direct player-agent interaction or debugging.

## What to Keep, Adapt, or Remove for TTRPG Agent

### Worth Keeping/Adapting
- The overall orchestration of cognitive modules (perceive, retrieve, plan, reflect, execute).
- The use of associative and scratch memory for narrative continuity.
- The move method as a high-level cognitive loop, if refactored for narrative context.
- The ability to save/load agent state.

### Worth Removing/Refactoring
- All logic tied to physical simulation, tiles, or time-based routines.
- Any dependencies on "maze" or spatial navigation.
- Simulation-specific triggers and state management.

## Summary
The `Persona` class is the central orchestrator for agent behavior. For a TTRPG pawn agent, its structure should be preserved, but all simulation-specific logic should be removed or refactored. The focus should be on narrative-driven perception, memory, planning, and action, enabling the agent to act as a responsive, context-aware character in a story-driven game.
